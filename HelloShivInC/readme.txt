Android : Native code(like C) integration into Android



Includes the steps to integrate C code into Android.

1. Create and android application(ex - HelloShivInC)
2. In the activity where u wanna use native code, include the following code.

static {
        System.loadLibrary("ndk_demo"); // ndk_demo is name of .so file(ll b explained later).
    }

    /**
     * Native function - Adds two integers, returning their sum
     */
    public native int add(int v1, int v2);

    /**
     * Native function - Returns Hello World string
     */
    public native String hello();

3. Create C Header File

   a) In your project bin directory (in my case, <EclipseWorkspace>/HelloShivInC/src), run javah(It will come up wid Java sdk as javah.exe) tool to create the JNI header file.
example -

"C:\Program Files\Java\jdk1.7.0_40\bin\javah" -classpath D:\Android\adt-bundle-windows-x86_64-20130917\sdk\platforms\android-19\adroid.jar;../bin/classes com.c.helloshivinc.MainActivity



4 Next, create a jni directory in your project directory (in my case, <EclipseWorkspace>/HelloShivInC/jni).

5. Next, copy the JNI header file (in ur case it will be com_c_helloshivinc_MainActivity.h{which was generated by javah}), from <EclipseWorkspace>/HelloShivIn/src to <EclipseWorkspace>/HelloShivInC/jni

6.Write the C Code

In your <EclipseWorkspace>/NDKDemo/jni/ folder, create ndk_demo.c file. This is where we'll implement the native code. To start, copy the function signatures from the header file, and provide the implementation for those functions. In this example, the header file looks like this:
<EclipseWorkspace>/HelloShivInC/jni/com_c_helloshivinc_MainActivity.h
Code:
/*
 * Class:     com_c_helloshivinc_MainActivity
 * Method:    add
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_com_c_helloshivinc_MainActivity_add
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     com_c_helloshivinc_MainActivity
 * Method:    hello
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_c_helloshivinc_MainActivity_hello
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif


And the corresponding implementation looks like this:

<EclipseWorkspace>/HelloShivInC/jni/ndk_demo.c
Code:


#include "com_c_helloshivinc_MainActivity.h"

JNIEXPORT jstring JNICALL Java_com_c_helloshivinc_MainActivity_hello
  (JNIEnv *env, jobject obj) {
		return (*env)->NewStringUTF(env, "Hello World!");


}

JNIEXPORT jint JNICALL Java_com_c_helloshivinc_MainActivity_add
 (JNIEnv *env, jobject obj, jint value1, jint value2) {
		return (value1 + value2);
}

7. Build The Library

To build the library, first we need to create a makefile for how to compile the C code:

<EclipseWorkspace>/HelloShivInC/jni/Android.mk
Code:

LOCAL_PATH := $(call my-dir)
include $(CLEAR_VARS)
LOCAL_MODULE := ndk_demo
LOCAL_SRC_FILES := ndk_demo.c
include $(BUILD_SHARED_LIBRARY)


    LOCAL_PATH - this line should be left as it is since your source file ('ndk_demo.c') is in the same directory as the 'Android.mk' file.
    include $(CLEAR_VARS) - this line should be left as it is. It is required.
    LOCAL_MODULE - this line should be changed to match your module name. For this tutorial we'll change it to 'ndk_demo'(It can be any name). This name should not have any spaces in it as it will be made into the actual library's name ('ndk_demo.so' for us).
    LOCAL_CFLAGS - This line can be left as it is. It is for compiler flags.
    LOCAL_SRC_FILES - this line should be changed to 'ndk_demo.c' since that's our source file.If you have more c files, Have to add their name here too.
    LOCAL_LDLIBS - leave this the same.
    include $(BUILD_SHARED_LIBRARY) - leave this the same. 


Now in command promt navigate to ur project and run ndk_build. It will generate the .so file.

ex -

D:\Workspace\HelloShivInC>"D:\Android_Downloads\android-ndk-r9-windows-x86_64\android-ndk-r9\ndk-build"

You can now refresh your Eclipse project and your /libs/ directory should be containing your armeabi/libndk_demo.so file.


8. Calling Native Code from Java

Load the c library file in static block and call the functions wherever we need. As shown below,

static {
        System.loadLibrary("ndk_demo")
; /* ndk_demo is name of .so file(It will be usually libndk_demo.so under
                             /libs/armeabi/libndk_demo.so). */
    }

    /**
     * Native function - Adds two integers, returning their sum
     */
    public native int add(int v1, int v2);

    /**
     * Native function - Returns Hello World string
     */
    public native String hello();
